// Code generated by protoc-gen-go. DO NOT EDIT.
// source: demo.proto

/*
Package demo is a generated protocol buffer package.

It is generated from these files:
	demo.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	Command
	Output
*/
package demo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Command struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Path    string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	User    string `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Command) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Command) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Command) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type Output struct {
	Output string `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Output) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "demo.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "demo.HelloReply")
	proto.RegisterType((*Command)(nil), "demo.Command")
	proto.RegisterType((*Output)(nil), "demo.Output")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Executer service

type ExecuterClient interface {
	// just say hello
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// excute command
	ExecuteCMD(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Output, error)
}

type executerClient struct {
	cc *grpc.ClientConn
}

func NewExecuterClient(cc *grpc.ClientConn) ExecuterClient {
	return &executerClient{cc}
}

func (c *executerClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/demo.Executer/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executerClient) ExecuteCMD(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := grpc.Invoke(ctx, "/demo.Executer/ExecuteCMD", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Executer service

type ExecuterServer interface {
	// just say hello
	Hello(context.Context, *HelloRequest) (*HelloReply, error)
	// excute command
	ExecuteCMD(context.Context, *Command) (*Output, error)
}

func RegisterExecuterServer(s *grpc.Server, srv ExecuterServer) {
	s.RegisterService(&_Executer_serviceDesc, srv)
}

func _Executer_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuterServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Executer/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuterServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executer_ExecuteCMD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuterServer).ExecuteCMD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Executer/ExecuteCMD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuterServer).ExecuteCMD(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _Executer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.Executer",
	HandlerType: (*ExecuterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Executer_Hello_Handler,
		},
		{
			MethodName: "ExecuteCMD",
			Handler:    _Executer_ExecuteCMD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

func init() { proto.RegisterFile("demo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcd, 0x4a, 0xc5, 0x30,
	0x10, 0x85, 0xef, 0xd5, 0xda, 0xea, 0x50, 0x41, 0x66, 0x21, 0xa1, 0xab, 0x92, 0x85, 0x08, 0x42,
	0x05, 0x7d, 0x84, 0x2a, 0x08, 0x22, 0x42, 0xdf, 0x20, 0xb6, 0x83, 0x5d, 0x24, 0x4d, 0x6c, 0x12,
	0xb0, 0x6f, 0x2f, 0xf9, 0x29, 0x78, 0x77, 0xdf, 0x39, 0x9c, 0xe4, 0xcc, 0x0c, 0xc0, 0x44, 0x4a,
	0x77, 0x66, 0xd5, 0x4e, 0x63, 0x11, 0x98, 0x73, 0xa8, 0xdf, 0x48, 0x4a, 0x3d, 0xd0, 0x8f, 0x27,
	0xeb, 0x10, 0xa1, 0x58, 0x84, 0x22, 0x76, 0x6c, 0x8f, 0xf7, 0x57, 0x43, 0x64, 0x7e, 0x07, 0x90,
	0x33, 0x46, 0x6e, 0xc8, 0xa0, 0x52, 0x64, 0xad, 0xf8, 0xde, 0x43, 0xbb, 0xe4, 0xef, 0x50, 0xf5,
	0x5a, 0x29, 0xb1, 0x4c, 0x21, 0x34, 0x26, 0xdc, 0x43, 0x59, 0x86, 0x02, 0x23, 0xdc, 0xcc, 0xce,
	0x52, 0x41, 0xe0, 0xe0, 0x79, 0x4b, 0x2b, 0x3b, 0x4f, 0x5e, 0x60, 0xde, 0x42, 0xf9, 0xe9, 0x9d,
	0xf1, 0x0e, 0x6f, 0xa1, 0xd4, 0x91, 0xf2, 0x57, 0x59, 0x3d, 0xcd, 0x70, 0xf9, 0xfa, 0x4b, 0xa3,
	0x77, 0xb4, 0xe2, 0x23, 0x5c, 0xc4, 0x11, 0x11, 0xbb, 0xb8, 0xe2, 0xff, 0x9d, 0x9a, 0x9b, 0x13,
	0xcf, 0xc8, 0x8d, 0x1f, 0xf0, 0x01, 0x20, 0x3f, 0xee, 0x3f, 0x5e, 0xf0, 0x3a, 0x25, 0xf2, 0xf4,
	0x4d, 0x9d, 0x64, 0xea, 0xe7, 0x87, 0xaf, 0x32, 0x5e, 0xec, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x16, 0x16, 0xb7, 0x88, 0x3f, 0x01, 0x00, 0x00,
}
